<?xml version="1.0" encoding="utf-8"?>
<local:CheckInventory xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:a="clr-namespace:AutoLotDisconnectedLayer;assembly=AutoLotDAL" xmlns:local="clr-namespace:CheckInventoryWorkflowLib;assembly=CheckInventoryWorkflowLib" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>AutoLotDisconnectedLayer</x:String>
      <x:String>System.Data.Common</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>AutoLotDAL</AssemblyReference>
      <AssemblyReference>System.Data.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>CheckInventoryWorkflowLib</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:CheckInventory.Implementation>
    <Sequence DisplayName="Look Up Product">
      <Sequence.Variables>
        <Variable x:TypeArguments="a:InventoryDALDisLayer" Name="AutoLotInventory">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="a:InventoryDALDisLayer">new InventoryDALDisLayer(@"Data Source=SZC71-PC\SQLEXPRESS;Initial Catalog=AutoLot;User Id=sa;Password=ab998CD112;")</mca:CSharpValue>
          </Variable.Default>
        </Variable>
        <Variable x:TypeArguments="sd:DataTable" Name="Inventory">
          <Variable.Default>
            <mca:CSharpValue x:TypeArguments="sd:DataTable">null</mca:CSharpValue>
          </Variable.Default>
        </Variable>
      </Sequence.Variables>
      <Assign>
        <Assign.To>
          <OutArgument x:TypeArguments="sd:DataTable">
            <mca:CSharpReference x:TypeArguments="sd:DataTable">Inventory</mca:CSharpReference>
          </OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="sd:DataTable">
            <mca:CSharpValue x:TypeArguments="sd:DataTable">AutoLotInventory.GetAllInventory()</mca:CSharpValue>
          </InArgument>
        </Assign.Value>
      </Assign>
      <If>
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean" xml:space="preserve">(from car in Inventory.AsEnumerable()
 where (string)car["Color"] == RequestedColor &amp;&amp;
 (string)car["Make"] == RequestedMake select car).Any()</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Switch x:TypeArguments="x:String">
            <Switch.Default>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">
                    <mca:CSharpReference x:TypeArguments="x:String">FormattedResponse</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">String.Format("Yes, we have a {0} {1} you can purchase",RequestedColor,RequestedMake)</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
            </Switch.Default>
            <Switch.Expression>
              <InArgument x:TypeArguments="x:String">
                <mca:CSharpValue x:TypeArguments="x:String">RequestedMake</mca:CSharpValue>
              </InArgument>
            </Switch.Expression>
            <Assign x:Key="BMW">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">FormattedResponse</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">String.Format("Yes sir! We can send you {0} {1} as soon as {2}!",
RequestedColor, RequestedMake, DateTime.Now)</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign x:Key="Yugo">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">FormattedResponse</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">String.Format("Please, we will pay you to get this {0} off our lot!",
RequestedMake)</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </Switch>
        </If.Then>
        <If.Else>
          <Sequence>
            <local:CreateSalesMemoActivity>
              <local:CreateSalesMemoActivity.Color>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">RequestedColor</mca:CSharpValue>
                </InArgument>
              </local:CreateSalesMemoActivity.Color>
              <local:CreateSalesMemoActivity.Make>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">RequestedMake</mca:CSharpValue>
                </InArgument>
              </local:CreateSalesMemoActivity.Make>
            </local:CreateSalesMemoActivity>
            <Assign>
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">FormattedResponse</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">Sorry, out of stock</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Else>
      </If>
      <sads:DebugSymbol.Symbol>9xB5TgY/Q7wipH0WZuLgbrdQU0c6XHZpc3VhbCBzdHVkaW8gMjAxNVxQcm9qZWN0c1xXRkRlbW9cQ2hlY2tJbnZlbnRvcnlXb3JrZmxvd0xpYlxDaGVja0ludmVudG9yeS54YW1sGjQDpQEOAgEBOAs4ywECAQg9Cz1RAgECQQVMDgIBWU0FowEKAgEOSQtJbwIBYEQLRF4CAVpQC1JKAgEPVgmEARICASuHAQmhARQCARVnD2daAgEsagt2FAIBTHcLgwEUAgE/WA1jFgIBMogBC5QBKwIBHpUBC58BFAIBFnIRcz8CAVNtEW1oAgFNfxGAASECAUZ6EXpoAgFAYBNgpgECATlbE1tqAgEziwERiwFdAgElkAERkAFcAgEfnAE2nAFJAgEdmAERmAFoAgEX</sads:DebugSymbol.Symbol>
    </Sequence>
  </local:CheckInventory.Implementation>
</local:CheckInventory>